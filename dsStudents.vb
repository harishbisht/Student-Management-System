'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.0.3705.0
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class dsStudents
    Inherits DataSet
    
    Private tableSTUDENTS As STUDENTSDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("STUDENTS")) Is Nothing) Then
                Me.Tables.Add(New STUDENTSDataTable(ds.Tables("STUDENTS")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property STUDENTS As STUDENTSDataTable
        Get
            Return Me.tableSTUDENTS
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As dsStudents = CType(MyBase.Clone,dsStudents)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("STUDENTS")) Is Nothing) Then
            Me.Tables.Add(New STUDENTSDataTable(ds.Tables("STUDENTS")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableSTUDENTS = CType(Me.Tables("STUDENTS"),STUDENTSDataTable)
        If (Not (Me.tableSTUDENTS) Is Nothing) Then
            Me.tableSTUDENTS.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "dsStudents"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/dsStudents.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableSTUDENTS = New STUDENTSDataTable
        Me.Tables.Add(Me.tableSTUDENTS)
    End Sub
    
    Private Function ShouldSerializeSTUDENTS() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub STUDENTSRowChangeEventHandler(ByVal sender As Object, ByVal e As STUDENTSRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STUDENTSDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnBCODE As DataColumn
        
        Private columnROLLNO As DataColumn
        
        Private columnSNAME As DataColumn
        
        Private columnFNAME As DataColumn
        
        Private columnEMAIL As DataColumn
        
        Private columnCURROCUP As DataColumn
        
        Private columnDJ As DataColumn
        
        Private columnFEEPAID As DataColumn
        
        Friend Sub New()
            MyBase.New("STUDENTS")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property BCODEColumn As DataColumn
            Get
                Return Me.columnBCODE
            End Get
        End Property
        
        Friend ReadOnly Property ROLLNOColumn As DataColumn
            Get
                Return Me.columnROLLNO
            End Get
        End Property
        
        Friend ReadOnly Property SNAMEColumn As DataColumn
            Get
                Return Me.columnSNAME
            End Get
        End Property
        
        Friend ReadOnly Property FNAMEColumn As DataColumn
            Get
                Return Me.columnFNAME
            End Get
        End Property
        
        Friend ReadOnly Property EMAILColumn As DataColumn
            Get
                Return Me.columnEMAIL
            End Get
        End Property
        
        Friend ReadOnly Property CURROCUPColumn As DataColumn
            Get
                Return Me.columnCURROCUP
            End Get
        End Property
        
        Friend ReadOnly Property DJColumn As DataColumn
            Get
                Return Me.columnDJ
            End Get
        End Property
        
        Friend ReadOnly Property FEEPAIDColumn As DataColumn
            Get
                Return Me.columnFEEPAID
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As STUDENTSRow
            Get
                Return CType(Me.Rows(index),STUDENTSRow)
            End Get
        End Property
        
        Public Event STUDENTSRowChanged As STUDENTSRowChangeEventHandler
        
        Public Event STUDENTSRowChanging As STUDENTSRowChangeEventHandler
        
        Public Event STUDENTSRowDeleted As STUDENTSRowChangeEventHandler
        
        Public Event STUDENTSRowDeleting As STUDENTSRowChangeEventHandler
        
        Public Overloads Sub AddSTUDENTSRow(ByVal row As STUDENTSRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddSTUDENTSRow(ByVal BCODE As String, ByVal ROLLNO As Decimal, ByVal SNAME As String, ByVal FNAME As String, ByVal EMAIL As String, ByVal CURROCUP As String, ByVal DJ As Date, ByVal FEEPAID As Decimal) As STUDENTSRow
            Dim rowSTUDENTSRow As STUDENTSRow = CType(Me.NewRow,STUDENTSRow)
            rowSTUDENTSRow.ItemArray = New Object() {BCODE, ROLLNO, SNAME, FNAME, EMAIL, CURROCUP, DJ, FEEPAID}
            Me.Rows.Add(rowSTUDENTSRow)
            Return rowSTUDENTSRow
        End Function
        
        Public Function FindByBCODEROLLNO(ByVal BCODE As String, ByVal ROLLNO As Decimal) As STUDENTSRow
            Return CType(Me.Rows.Find(New Object() {BCODE, ROLLNO}),STUDENTSRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As STUDENTSDataTable = CType(MyBase.Clone,STUDENTSDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New STUDENTSDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnBCODE = Me.Columns("BCODE")
            Me.columnROLLNO = Me.Columns("ROLLNO")
            Me.columnSNAME = Me.Columns("SNAME")
            Me.columnFNAME = Me.Columns("FNAME")
            Me.columnEMAIL = Me.Columns("EMAIL")
            Me.columnCURROCUP = Me.Columns("CURROCUP")
            Me.columnDJ = Me.Columns("DJ")
            Me.columnFEEPAID = Me.Columns("FEEPAID")
        End Sub
        
        Private Sub InitClass()
            Me.columnBCODE = New DataColumn("BCODE", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnBCODE)
            Me.columnROLLNO = New DataColumn("ROLLNO", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnROLLNO)
            Me.columnSNAME = New DataColumn("SNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnSNAME)
            Me.columnFNAME = New DataColumn("FNAME", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFNAME)
            Me.columnEMAIL = New DataColumn("EMAIL", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEMAIL)
            Me.columnCURROCUP = New DataColumn("CURROCUP", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCURROCUP)
            Me.columnDJ = New DataColumn("DJ", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDJ)
            Me.columnFEEPAID = New DataColumn("FEEPAID", GetType(System.Decimal), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFEEPAID)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnBCODE, Me.columnROLLNO}, true))
            Me.columnBCODE.AllowDBNull = false
            Me.columnROLLNO.AllowDBNull = false
        End Sub
        
        Public Function NewSTUDENTSRow() As STUDENTSRow
            Return CType(Me.NewRow,STUDENTSRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New STUDENTSRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(STUDENTSRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.STUDENTSRowChangedEvent) Is Nothing) Then
                RaiseEvent STUDENTSRowChanged(Me, New STUDENTSRowChangeEvent(CType(e.Row,STUDENTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.STUDENTSRowChangingEvent) Is Nothing) Then
                RaiseEvent STUDENTSRowChanging(Me, New STUDENTSRowChangeEvent(CType(e.Row,STUDENTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.STUDENTSRowDeletedEvent) Is Nothing) Then
                RaiseEvent STUDENTSRowDeleted(Me, New STUDENTSRowChangeEvent(CType(e.Row,STUDENTSRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.STUDENTSRowDeletingEvent) Is Nothing) Then
                RaiseEvent STUDENTSRowDeleting(Me, New STUDENTSRowChangeEvent(CType(e.Row,STUDENTSRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveSTUDENTSRow(ByVal row As STUDENTSRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STUDENTSRow
        Inherits DataRow
        
        Private tableSTUDENTS As STUDENTSDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableSTUDENTS = CType(Me.Table,STUDENTSDataTable)
        End Sub
        
        Public Property BCODE As String
            Get
                Return CType(Me(Me.tableSTUDENTS.BCODEColumn),String)
            End Get
            Set
                Me(Me.tableSTUDENTS.BCODEColumn) = value
            End Set
        End Property
        
        Public Property ROLLNO As Decimal
            Get
                Return CType(Me(Me.tableSTUDENTS.ROLLNOColumn),Decimal)
            End Get
            Set
                Me(Me.tableSTUDENTS.ROLLNOColumn) = value
            End Set
        End Property
        
        Public Property SNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTUDENTS.SNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTUDENTS.SNAMEColumn) = value
            End Set
        End Property
        
        Public Property FNAME As String
            Get
                Try 
                    Return CType(Me(Me.tableSTUDENTS.FNAMEColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTUDENTS.FNAMEColumn) = value
            End Set
        End Property
        
        Public Property EMAIL As String
            Get
                Try 
                    Return CType(Me(Me.tableSTUDENTS.EMAILColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTUDENTS.EMAILColumn) = value
            End Set
        End Property
        
        Public Property CURROCUP As String
            Get
                Try 
                    Return CType(Me(Me.tableSTUDENTS.CURROCUPColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTUDENTS.CURROCUPColumn) = value
            End Set
        End Property
        
        Public Property DJ As Date
            Get
                Try 
                    Return CType(Me(Me.tableSTUDENTS.DJColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTUDENTS.DJColumn) = value
            End Set
        End Property
        
        Public Property FEEPAID As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableSTUDENTS.FEEPAIDColumn),Decimal)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSTUDENTS.FEEPAIDColumn) = value
            End Set
        End Property
        
        Public Function IsSNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTUDENTS.SNAMEColumn)
        End Function
        
        Public Sub SetSNAMENull()
            Me(Me.tableSTUDENTS.SNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFNAMENull() As Boolean
            Return Me.IsNull(Me.tableSTUDENTS.FNAMEColumn)
        End Function
        
        Public Sub SetFNAMENull()
            Me(Me.tableSTUDENTS.FNAMEColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsEMAILNull() As Boolean
            Return Me.IsNull(Me.tableSTUDENTS.EMAILColumn)
        End Function
        
        Public Sub SetEMAILNull()
            Me(Me.tableSTUDENTS.EMAILColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCURROCUPNull() As Boolean
            Return Me.IsNull(Me.tableSTUDENTS.CURROCUPColumn)
        End Function
        
        Public Sub SetCURROCUPNull()
            Me(Me.tableSTUDENTS.CURROCUPColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsDJNull() As Boolean
            Return Me.IsNull(Me.tableSTUDENTS.DJColumn)
        End Function
        
        Public Sub SetDJNull()
            Me(Me.tableSTUDENTS.DJColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsFEEPAIDNull() As Boolean
            Return Me.IsNull(Me.tableSTUDENTS.FEEPAIDColumn)
        End Function
        
        Public Sub SetFEEPAIDNull()
            Me(Me.tableSTUDENTS.FEEPAIDColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class STUDENTSRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As STUDENTSRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As STUDENTSRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As STUDENTSRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
